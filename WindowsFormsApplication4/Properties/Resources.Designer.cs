//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApplication4.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WindowsFormsApplication4.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap _1 {
            get {
                object obj = ResourceManager.GetObject("_1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include&lt;bits/stdc++.h&gt;
        ///using namespace std;
        ///ifstream f(&quot;bellmanford.in&quot;);
        ///ofstream g(&quot;bellmanford.out&quot;);
        ///
        ///queue &lt;int&gt; v;
        ///vector &lt;int&gt; a[50001],c[50001];
        ///int d[50001],w[500001],i,n,m,x,y,z,j;
        /// 
        ///int main()
        ///{
        ///   
        ///    f &gt;&gt; n &gt;&gt; m;
        ///    for (i=1;i&lt;=m;i++)
        ///    {
        ///        f &gt;&gt; x &gt;&gt; y &gt;&gt; z;
        ///        a[x].push_back(y);
        ///        c[x].push_back(z);
        ///    }
        ///    for (i=2;i&lt;=n;i++)   d[i]=1 &lt;&lt; 30;
        ///    v.push(1);
        ///    while (!v.empty())
        ///    {
        ///        x=v.front();
        ///        w[x]++;
        ///        if (w[x]&gt;n)
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string bellman {
            get {
                return ResourceManager.GetString("bellman", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;bits/stdc++.h&gt;
        ///#define INF 9999999
        ///using namespace std;
        ///ifstream f(&quot;bfs.in&quot;);
        ///ofstream g(&quot;bfs.out&quot;);
        ///
        ///int N,M,Start;
        ///vector &lt;int&gt; G[100001];
        ///int D[100001]= {0};
        ///
        ///
        ///int main()
        ///{
        ///    f&gt;&gt;N&gt;&gt;M&gt;&gt;Start;
        ///    for(int i=1; i&lt;=M; i++)
        ///    {
        ///        int x,y;
        ///        f&gt;&gt;x&gt;&gt;y;
        ///        G[x].emplace_back(y);
        ///    }
        ///
        ///    for(int i=1; i&lt;=N; i++) D[i]=INF;
        ///
        ///    queue &lt;int&gt; Q;
        ///    Q.push(Start);
        ///    D[Start]=0;
        ///    while(!Q.empty())
        ///    {
        ///        int current=Q.front();
        ///        Q.pop();
        ///
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string bfs {
            get {
                return ResourceManager.GetString("bfs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;bits/stdc++.h&gt;
        ///using namespace std;
        ///vector&lt;int&gt; G[100000],RS[100000];
        ///int N,M,T[100000],P[100000],rs,St[100000],st;
        ///ifstream f(&quot;biconex.in&quot;);
        ///ofstream g(&quot;biconex.out&quot;);
        /// 
        ///void DFS(int node)
        ///{
        ///    St[++st] = node;
        /// 
        ///    for(auto next:G[node])
        ///        if(P[next]) P[node] = min(P[node],T[next]);
        ///        else
        ///        {
        ///            int p=st;
        ///            P[next] = T[next] = T[node] + 1;
        ///            DFS(next);
        ///            P[node] = min(P[node],P[next]);
        ///            if(P[next] &gt;= T[node [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string biconexe {
            get {
                return ResourceManager.GetString("biconexe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;bits/stdc++.h&gt;
        ///using namespace std;
        ///ifstream f(&quot;cuplaj.in&quot;);
        ///ofstream g(&quot;cuplaj.out&quot;);
        ///int n,m,k,MaxMatch=0,R[10000],L[10000];
        ///vector&lt;int&gt; v[10000];
        ///bitset&lt;10000&gt; T;
        /// 
        ///inline int DFS(int n)
        ///{
        ///    if (T[n])return 0;
        ///    T[n]=1;
        ///    for (auto j:v[n]) if (!L[j]) return L[j]=n,R[n]=j;
        ///    for (auto j:v[n]) if (DFS(L[j])) return L[j]=n,R[n]=j;
        ///    return 0;
        ///}
        /// 
        ///int main()
        ///{
        ///    f&gt;&gt;n&gt;&gt;m&gt;&gt;k;
        ///    for (int i=1; i&lt;=k; ++i)
        ///    {
        ///        int x,y;
        ///        f&gt;&gt;x&gt;&gt;y,v[x].push_back(y);
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string cuplaj {
            get {
                return ResourceManager.GetString("cuplaj", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;bits/stdc++.h&gt;
        ///#define INF 9999999
        ///using namespace std;
        ///ifstream f(&quot;bfs.in&quot;);
        ///ofstream g(&quot;bfs.out&quot;);
        ///
        ///int N,M,Start;
        ///vector &lt;int&gt; G[100001];
        ///int Viz[100001]= {0};
        ///
        ///void DFS(int node)
        ///{
        ///	Viz[node]=1;
        ///	for(auto next:G[node])
        ///		if(Viz[next]==0) DFS(next);	
        ///}
        ///
        ///int main()
        ///{
        ///    f&gt;&gt;N&gt;&gt;M&gt;&gt;Start;
        ///    for(int i=1; i&lt;=M; i++)
        ///    {
        ///        int x,y;
        ///        f&gt;&gt;x&gt;&gt;y;
        ///        G[x].emplace_back(y);
        ///    }	
        ///	DFS(Start);
        ///}
        ///.
        /// </summary>
        internal static string dfs {
            get {
                return ResourceManager.GetString("dfs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;bits/stdc++.h&gt;
        ///#define weight first
        ///#define node second
        ///#define mp make_pair
        ///#define INF 1e8
        ///using namespace std;
        /// 
        ///vector &lt; pair &lt;int,int&gt; &gt; Q;
        ///vector &lt; pair &lt;int,int&gt; &gt; G[50001];
        ///pair &lt;int,int&gt; u;
        /// 
        ///int  viz[50001]={0};
        ///int n, m;
        ///int d[50001];
        /// 
        ///bool cmp(const pair&lt;int, int&gt;&amp; a, const pair&lt;int, int&gt;&amp; b)
        ///{
        ///    return a.weight &gt; b.weight;
        ///}
        /// 
        ///void init()
        ///{   d[1]=0;
        ///    viz[1]=1;
        ///    for(int i=2;i&lt;=n;i++) d[i]=INF;
        ///}
        /// 
        ///void read_data()
        ///{
        ///    int x,y,c;
        ///    freopen(&quot;dij [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string dijkstra {
            get {
                return ResourceManager.GetString("dijkstra", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include&lt;bits/stdc++.h&gt;
        ///using namespace std;
        /// 
        ///FILE *f=fopen(&quot;ciclueuler.in&quot;,&quot;r&quot;);
        ///FILE *g=fopen(&quot;ciclueuler.out&quot;,&quot;w&quot;);
        /// 
        ///int edge_x[500001];
        ///int edge_y[500001];
        ///int viz[500001]= {0};
        /// 
        ///vector &lt;int&gt; G[100001];
        ///stack &lt;int&gt; ST;
        ///int n,m,x,y,ok=1;
        /// 
        ///void read()
        ///{
        ///    fscanf(f,&quot;%d%d&quot;,&amp;n,&amp;m);
        ///    for(int i=1; i&lt;=m; i++)
        ///    {
        ///        fscanf(f,&quot;%d%d&quot;,&amp;x,&amp;y);
        ///        edge_x[i]=x;
        ///        edge_y[i]=y;
        ///        G[x].push_back(i);
        ///        G[y].push_back(i);
        ///    }
        ///}
        /// 
        ///void euler()
        ///{
        ///    ST.p [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string eulerian {
            get {
                return ResourceManager.GetString("eulerian", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;bits/stdc++.h&gt;
        ///#define maxN 1002
        /// 
        ///FILE *fin  = freopen(&quot;maxflow.in&quot;, &quot;r&quot;, stdin);
        ///FILE *fout = freopen(&quot;maxflow.out&quot;, &quot;w&quot;, stdout);
        /// 
        ///using namespace std;
        ///int N, M;
        ///int r[maxN][maxN];
        ///int flow;
        ///queue &lt;int&gt; Q;
        ///struct Node{ int dad;vector &lt;int&gt; adj;} G[maxN];
        /// 
        ///void read()
        ///{
        ///    int u, v, capacity;
        ///    scanf(&quot;%d %d&quot;, &amp;N, &amp;M);
        ///    for(int i = 0; i &lt; M; ++ i)
        ///    {
        ///        scanf(&quot;%d %d %d&quot;, &amp;u, &amp;v, &amp;capacity);
        ///        G[u].adj.push_back(v);
        ///        G[v].adj.push_back(u);
        ///        [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string flux {
            get {
                return ResourceManager.GetString("flux", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;bits/stdc++.h&gt;
        ///#define INF 1e8
        ///#define b(x) (1&lt;&lt;(x))
        ///using namespace std;
        ///int n,m,cost[18][18];
        ///int dp[1&lt;&lt;18][18];
        ///int sol=INF;
        /// 
        ///void init()
        ///{
        ///    for (auto&amp; a: dp) fill(begin(a), end(a), INF);
        ///    dp[1][0]=0;
        /// 
        ///}
        /// 
        ///void read_data()
        ///{
        ///    int x,y,c;
        ///    freopen(&quot;hamilton.in&quot;, &quot;r&quot;, stdin);
        ///    cin&gt;&gt;n&gt;&gt;m;
        ///    for(int i=1;i&lt;=m;i++)
        ///    {
        ///        cin&gt;&gt;x&gt;&gt;y&gt;&gt;c;
        ///        cost[x][y]=c;
        ///    }
        ///}
        /// 
        ///void solve()
        ///{
        ///        for(int mask=3;mask&lt;b(n);mask += 2)
        ///            for(int i [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string hamiltonian {
            get {
                return ResourceManager.GetString("hamiltonian", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;bits/stdc++.h&gt; 
        ///using namespace std;
        /// 
        ///int n,m;
        ///int visited[100001];
        ///int ST[100001],k=0;
        ///vector &lt;int&gt; G[100001];
        ///vector &lt;int&gt; G_reversed[100001];
        /// 
        ///int components_number=0;
        ///vector&lt;int&gt; components[100001];
        ///void read_data()
        ///{
        ///    int x,y;
        ///    ifstream f(&quot;ctc.in&quot;);
        ///    f&gt;&gt;n&gt;&gt;m;
        ///    for(int i=1;i&lt;=m;i++)
        ///    {
        ///        f&gt;&gt;x&gt;&gt;y;
        ///        G[x].push_back(y);
        ///        G_reversed[y].push_back(x);
        ///    }
        ///    f.close();
        /// 
        ///}
        /// 
        ///void DFS(int node)
        ///{
        ///    visited[node]=1;
        ///    for(size_t i [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string kosaraju {
            get {
                return ResourceManager.GetString("kosaraju", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;bits/stdc++.h&gt;
        ///using namespace std;
        ///ifstream f (&quot;apm.in&quot;);
        ///ofstream g (&quot;apm.out&quot;);
        /// 
        ///int v[200001],n,m,t,a,b,aux,i,cost=0,lg=0,sol[400001],sz[200001];
        /// 
        ///struct edge
        ///{
        ///    int x;
        ///    int y;
        ///    int c;
        ///    bool operator () (edge a,edge b)
        ///    {
        ///        return a.c&lt;b.c;
        ///    }
        ///} T[400001];
        /// 
        ///int main()
        ///{
        /// 
        ///    f&gt;&gt;n&gt;&gt;m;
        ///    for(i=1; i&lt;=m; ++i)
        ///        f&gt;&gt;T[i].x&gt;&gt;T[i].y&gt;&gt;T[i].c;
        ///    sort(T+1,T+1+m,edge());
        /// 
        ///    for(i=1; i&lt;=n; ++i) v[i]=i,sz[i]=1;
        /// 
        /// 
        /// 
        ///    for(i=1; i&lt;=m; i+ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string kruskal {
            get {
                return ResourceManager.GetString("kruskal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap OMEGGK0 {
            get {
                object obj = ResourceManager.GetObject("OMEGGK0", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap OMEGGK1 {
            get {
                object obj = ResourceManager.GetObject("OMEGGK1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;bits/stdc++.h&gt;
        ///using namespace std;
        ///ifstream f(&quot;apm.in&quot;);
        ///ofstream g(&quot;apm.out&quot;);
        /// 
        ///struct Edge
        ///{
        ///    int x,y,c;
        ///    Edge(int _x = 0,int _y = 0,int _c = 0)
        ///    {
        ///        x = _x;
        ///        y = _y;
        ///        c = _c;
        ///    }
        ///    bool operator ()(Edge a,Edge b)
        ///        {
        ///            return a.c &gt; b.c;
        ///        }
        ///};
        /// 
        ///int N,M,costArb;
        ///int Distance[200001];
        ///bitset&lt;200001&gt; Visited;
        ///priority_queue&lt;Edge,vector&lt;Edge&gt;,Edge&gt; Q;
        ///vector&lt;Edge&gt; G[200001];
        ///vector&lt;Edge&gt; Sol;
        /// 
        ///void read_data()
        ///{        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string prim {
            get {
                return ResourceManager.GetString("prim", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;bits/stdc++.h&gt;  
        ///#define MAXN  100005
        ///using namespace std;
        ///
        ///vector &lt;int&gt; adj[MAXN], con, idx, lowlink, in_stack; 
        ///vector &lt; vector &lt;int&gt; &gt; C; 
        ///stack &lt;int&gt; S; 
        ///int indecs;
        /// 
        ///void read_in(vector &lt;int&gt;* adj, int&amp; n)
        ///{
        ///    ifstream in(&quot;ctc.in&quot;);
        ///    int cnt_edges, x, y;
        /// 
        ///    in &gt;&gt; n;
        ///    for (in &gt;&gt; cnt_edges; cnt_edges &gt; 0; -- cnt_edges)
        ///        in &gt;&gt; x &gt;&gt; y,
        ///        adj[x - 1].push_back(y - 1);
        ///    in.close();
        ///}
        /// 
        ///void print_out(const vector &lt; vector &lt;int&gt; &gt;&amp; G)
        ///{
        ///    ofstream  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tarjan {
            get {
                return ResourceManager.GetString("tarjan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap White_tiger_on_the_tree_amazing {
            get {
                object obj = ResourceManager.GetObject("White_tiger_on_the_tree_amazing", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
